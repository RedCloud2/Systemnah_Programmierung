
Blink1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000e4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000138  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000168  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007aa  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000068a  00000000  00000000  00000972  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a9  00000000  00000000  00000ffc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000012a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000038d  00000000  00000000  000012cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d8  00000000  00000000  00001659  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001731  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 70 00 	jmp	0xe0	; 0xe0 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:


int main(void)
{
    // Richtung des Signals
	DDRB = 0xFF;
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	84 b9       	out	0x04, r24	; 4
	PORTB = 0;
  84:	15 b8       	out	0x05, r1	; 5
	
    while (1) 
    {
		PORTB = ROT;
  86:	32 e0       	ldi	r19, 0x02	; 2
		_delay_ms(2000);
		PORTB = ROT | GELB;
  88:	26 e0       	ldi	r18, 0x06	; 6
		_delay_ms(1000);
		PORTB = GRUN;
  8a:	91 e0       	ldi	r25, 0x01	; 1
		_delay_ms(2000);
		PORTB = GELB;
  8c:	84 e0       	ldi	r24, 0x04	; 4
	DDRB = 0xFF;
	PORTB = 0;
	
    while (1) 
    {
		PORTB = ROT;
  8e:	35 b9       	out	0x05, r19	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  90:	4f ef       	ldi	r20, 0xFF	; 255
  92:	57 ea       	ldi	r21, 0xA7	; 167
  94:	61 e6       	ldi	r22, 0x61	; 97
  96:	41 50       	subi	r20, 0x01	; 1
  98:	50 40       	sbci	r21, 0x00	; 0
  9a:	60 40       	sbci	r22, 0x00	; 0
  9c:	e1 f7       	brne	.-8      	; 0x96 <main+0x16>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <main+0x20>
  a0:	00 00       	nop
		_delay_ms(2000);
		PORTB = ROT | GELB;
  a2:	25 b9       	out	0x05, r18	; 5
  a4:	4f ef       	ldi	r20, 0xFF	; 255
  a6:	53 ed       	ldi	r21, 0xD3	; 211
  a8:	60 e3       	ldi	r22, 0x30	; 48
  aa:	41 50       	subi	r20, 0x01	; 1
  ac:	50 40       	sbci	r21, 0x00	; 0
  ae:	60 40       	sbci	r22, 0x00	; 0
  b0:	e1 f7       	brne	.-8      	; 0xaa <main+0x2a>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <main+0x34>
  b4:	00 00       	nop
		_delay_ms(1000);
		PORTB = GRUN;
  b6:	95 b9       	out	0x05, r25	; 5
  b8:	4f ef       	ldi	r20, 0xFF	; 255
  ba:	57 ea       	ldi	r21, 0xA7	; 167
  bc:	61 e6       	ldi	r22, 0x61	; 97
  be:	41 50       	subi	r20, 0x01	; 1
  c0:	50 40       	sbci	r21, 0x00	; 0
  c2:	60 40       	sbci	r22, 0x00	; 0
  c4:	e1 f7       	brne	.-8      	; 0xbe <main+0x3e>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <main+0x48>
  c8:	00 00       	nop
		_delay_ms(2000);
		PORTB = GELB;
  ca:	85 b9       	out	0x05, r24	; 5
  cc:	4f ef       	ldi	r20, 0xFF	; 255
  ce:	53 ed       	ldi	r21, 0xD3	; 211
  d0:	60 e3       	ldi	r22, 0x30	; 48
  d2:	41 50       	subi	r20, 0x01	; 1
  d4:	50 40       	sbci	r21, 0x00	; 0
  d6:	60 40       	sbci	r22, 0x00	; 0
  d8:	e1 f7       	brne	.-8      	; 0xd2 <main+0x52>
  da:	00 c0       	rjmp	.+0      	; 0xdc <main+0x5c>
  dc:	00 00       	nop
  de:	d7 cf       	rjmp	.-82     	; 0x8e <main+0xe>

000000e0 <_exit>:
  e0:	f8 94       	cli

000000e2 <__stop_program>:
  e2:	ff cf       	rjmp	.-2      	; 0xe2 <__stop_program>
